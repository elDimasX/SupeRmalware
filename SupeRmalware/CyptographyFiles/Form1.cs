using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace CyptographyFiles
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog();

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                textBox1.Text = dialog.FileName;
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            // Se for um exe
            if (Path.GetExtension(textBox1.Text) == ".exe")
            {
                // Criptografe o arquivo
                EncryptFile(textBox1.Text, textBox1.Text + ".enc");
            } else
            {
                // Criptografe a string
                string enc = EncryptString(File.ReadAllText(textBox1.Text), "dimas123");
                File.WriteAllText(Path.GetDirectoryName(textBox1.Text) + "\\code.txt", enc);
            }
        }


        /// <summary>
        /// Criptografa um arquivo
        /// </summary>
        public static void EncryptFile(string file, string outputFile)
        {
            // UnicodeEncoding
            UnicodeEncoding UE = new UnicodeEncoding();

            // Obtenha os bytes
            byte[] key = UE.GetBytes("dimas123");

            // Novo FileStream para o outputFile
            FileStream outputCrypt = new FileStream(
                // Arquivo
                outputFile,

                // Crie o arquivo
                FileMode.Create
            );

            // Novo RijndaelManaged, usado pra criptografar
            RijndaelManaged Rijndael = new RijndaelManaged();

            // Novo CryptoStream
            CryptoStream cs = new CryptoStream(
                // Arquivo onde salvar
                outputCrypt,

                // Crie uma criptografia
                Rijndael.CreateEncryptor(key, key),

                // Escreva
                CryptoStreamMode.Write
            );

            // Novo FileStream
            FileStream stream = new FileStream(file, FileMode.Open);

            // Data
            int data;

            // Leia todos os bytes do arquivo
            while ((data = stream.ReadByte()) != -1)
            {
                // Escreva os bytes no arquivo outputFile
                cs.WriteByte((byte)data);
            }

            // Feche o arquivo original
            stream.Close();

            // Feche o outputFile
            cs.Close();

            // Feche o outputCrypt
            outputCrypt.Close();
        }

        /// <summary>
        /// Função de criptografia para string
        /// </summary>
        public static string EncryptString(string text, string password)
        {
            // Bytes do texto
            byte[] Bytes = Encoding.Unicode.GetBytes(text);

            // Criptografia AES
            Aes encryptor = Aes.Create();

            // Bytes necessário para usar em Rfc2898DeriveBytes
            byte[] bytesToDevice = new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 };

            // Rfc2898DeriveBytes, que pega a senha pra criptografia e os bytes
            Rfc2898DeriveBytes deriveBytes = new Rfc2898DeriveBytes(password, bytesToDevice);

            // Configure o encryptor
            encryptor.Key = deriveBytes.GetBytes(32);
            encryptor.IV = deriveBytes.GetBytes(16);

            // Novo MemoryStream
            MemoryStream memoryStream = new MemoryStream();

            // Crie uma criptografia
            CryptoStream cryptoStream = new CryptoStream(
                memoryStream, encryptor.CreateEncryptor(), CryptoStreamMode.Write
            );

            // Escreva em Bytes
            cryptoStream.Write(Bytes, 0, Bytes.Length);
            cryptoStream.Close();

            // Retorne o texto criptografado
            return Convert.ToBase64String(memoryStream.ToArray());
        }
    }
}
